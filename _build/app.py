# This file generated by Quarto; do not edit by hand.
# shiny_mode: core

from __future__ import annotations

from pathlib import Path
from shiny import App, Inputs, Outputs, Session, ui

import asyncio
import polars as pl
from shiny import App, render, ui, reactive


def process_lc480(plate_results: pl.LazyFrame, input) -> pl.LazyFrame:
    return (
        plate_results
        # Add new columns and values for experiment, pcr_lab, pcr_date, comments
        .with_columns(
            experiment=input.experiment(),
            pcr_lab=input.lab(),
            pcr_date=input.date(),
            cq_conf=input.cq_conf(),
            amp_score=input.amp_score(),
            comments=input.comments(),
            pcr_assay=input.assay(),
        )
        # Change column names for Sample, Target, Cq, Cq.Conf, and Amp.Score
        # to match labkey input columns
        .rename(
            {
                "Name": "cartridge_id",
                "Cp": "pcr_ct",
                "Concentration": "pcr_copies",
            }
        )
        # Replace pcr_ct values with values accepted by labkey
        .with_columns(
            pl.when(pl.col("pcr_copies").is_null())
            .then(pl.lit(99))
            .otherwise(pl.col("pcr_copies"))
            .alias("pcr_ct")
        )
        # add dilution factor
        .with_columns(
            pl.when(pl.col("cartridge_id").str.contains("AE"))
            .then(pl.lit(input.dilution()))
            .otherwise(pl.null)
        )
        # reorder columns required for labkey
        .select(
            "experiment",
            "cartridge_id",
            "pcr_lab",
            "pcr_date",
            "pcr_assay",
            "pcr_ct",
            "pcr_copies",
            "dilution_factor",
            "cq_conf",
            "amp_score",
            "comments",
        )
    )


def process_lc96(plate_results: pl.LazyFrame, input) -> pl.LazyFrame:
    return (
        plate_results
        # Add new columns and values for experiment, pcr_lab, pcr_date, comments
        .with_columns(
            experiment=input.experiment(),
            pcr_lab=input.pcr_lab(),
            pcr_date=input.date(),
            cq_conf=input.cq_conf(),
            amp_score=input.amp_score(),
            comments=input.comments(),
        )
        # Change column names for Sample, Target, Cq, Cq.Conf, and Amp.Score to
        # match labkey input columns
        .rename(
            {
                "Sample.Name": "cartridge_id",
                "Gene.Name": "pcr_assay",
                "Cq": "pcr_ct",
                "Concentration.Mean": "pcr_copies",
            }
        )
        # Replace pcr_ct, pcr_copies, and pcr_assays with values accepted by labkey
        .with_columns(
            pcr_ct=pl.col("pcr_ct").str.replace("-", "99").str.to_integer(),
            pcr_copies=pl.col("pcr_ct").str.replace("-", ""),
            pcr_assay=(
                pl.when(pl.col("pcr_assay").is_in(["N1", "N2"])).then(
                    pl.concat_str([pl.lit("CDC "), pl.col("pcr_assay")]).otherwise(
                        pl.col("pcr_assay")
                    )
                )
            ),
        )
        .select(
            "experiment",
            "cartridge_id",
            "pcr_lab",
            "pcr_date",
            "pcr_assay",
            "pcr_ct",
            "pcr_copies",
            "cq_conf",
            "amp_score",
            "comments",
        )
    )

# ========================================================================




def server(input: Inputs, output: Outputs, session: Session) -> None:
    @reactive.calc
    def construct_table() -> pl.LazyFrame:
        file = input.file1()
        if not file:
            return

        plate_results = pl.scan_csv(
            file,
            header=input.header(),
            sep=input.sep(),
            quote=input.quote(),
            skip=input.skip(),
        )

        return (
            process_lc480(plate_results, input)
            if input.instrument() == "LC480"
            else process_lc96(plate_results, input)
        )


    @render.download(
        filename=lambda: f"{input.experiment()}_labkey_{input.pathogen()}_results.csv"
    )
    def download():
        table = construct_table()
        pl.sink_csv(table)
        yield

    # ========================================================================



    return None


_static_assets = ["index_files","styles.css"]
_static_assets = {"/" + sa: Path(__file__).parent / sa for sa in _static_assets}

app = App(
    Path(__file__).parent / "index.html",
    server,
    static_assets=_static_assets,
)
