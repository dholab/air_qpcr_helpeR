[{"name":"app.R","content":"library(shiny)\nlibrary(tidyverse)\nlibrary(bslib)\n\n# Define UI for slider demo app ----\nui <- page_sidebar(\n\n    # App title ----\n    title = \"Prepare Instrument qPCR Results for LabKey Upload\",\n\n    # Sidebar panel for inputs ----\n    sidebar = sidebar(\n\n        # Input: Select a file ----\n        fileInput(\n            \"file1\",\n            \"Choose Instrument qPCR Results\",\n            multiple = TRUE,\n            accept = c(\n                \"text/csv\",\n                \"text/comma-separated-values,text/plain\",\n                \".csv\"\n            )\n        ),\n\n        # Input: Checkbox if file has header ----\n        checkboxInput(\"header\", \"Header\", TRUE),\n\n        # Input: Select separator ----\n        radioButtons(\n            \"sep\",\n            \"Separator\",\n            choices = c(\n                Comma = \",\",\n                Semicolon = \";\",\n                Tab = \"\\t\"\n            ),\n            selected = \"\\t\"\n        ),\n\n        # Input: Define rows to skip, if any\n        numericInput(\n            inputId = \"skip\",\n            label = \"Rows at the top to skip:\",\n            value = 0,\n            min = 0,\n        ),\n\n        # Input: Select quotes ----\n        radioButtons(\n            \"quote\",\n            \"Quote\",\n            choices = c(\n                None = \"\",\n                \"Double Quote\" = '\"',\n                \"Single Quote\" = \"'\"\n            ),\n            selected = '\"'\n        ),\n\n        # Horizontal line ----\n        tags$hr(),\n\n        # Input: Choose an instrument\n        selectInput(\n            inputId = \"instrument\",\n            label = \"Choose an instrument:\",\n            choices = c(\"\", \"LC480\", \"LC96\"),\n            selected = \"\",\n        ),\n\n        # Input: the current experiment number\n        numericInput(\n            inputId = \"experiment\",\n            label = \"Experiment Number:\",\n            value = NULL,\n            min = 1,\n        ),\n\n        # Input: the current date\n        dateInput(\n            inputId = \"date\",\n            label = \"qPCR Run Date:\",\n            value = NULL,\n        ),\n\n        # Input: Choose a pathogen\n        selectInput(\n            inputId = \"pathogen\",\n            label = \"Choose a pathogen:\",\n            choices = c(\"\", \"IAV\", \"SC2\"),\n            selected = \"\",\n        ),\n\n        # Input: Choose the lab\n        textInput(\n            inputId = \"lab\",\n            label = \"PCR Lab:\",\n            value = \"AVRL\"\n        ),\n\n        # Input: Choose the cq_conf amp_score\n        textInput(\n            inputId = \"cq_conf\",\n            label = \"Cq configuration:\",\n            value = NULL\n        ),\n\n        # Input: Choose the amp_score\n        numericInput(\n            inputId = \"amp_score\",\n            label = \"Amplification score:\",\n            value = NULL,\n            min = 0,\n        ),\n\n        # Input: Add comments:\n        textInput(\n            inputId = \"comments\",\n            label = \"Additional comments:\",\n            value = NULL,\n        ),\n\n        # Input: the name of the assay\n        selectInput(\n            inputId = \"assay\",\n            label = \"Name of the assay run:\",\n            choices = c(\n                \"\",\n                \"IAV M gene\",\n                \"IAV M gene AVRL-20240316-multiplex\",\n                \"CDC N1\",\n                \"CDC N2\",\n                \"CDC N1 AVRL-20240316-multiplex\"\n            ),\n            selected = \"\",\n        ),\n\n        # Input: the dilution factor\n        numericInput(\n            inputId = \"dilution\",\n            label = \"Dilution factor\",\n            value = NULL,\n            min = 0,\n        ),\n\n        # Horizontal line ----\n        tags$hr(),\n\n        # Button\n        downloadButton(\"downloadData\", \"Download Dataset\"),\n    ),\n\n    # Output: Data file ----\n    tableOutput(\"table\"),\n)\n\nprocessLC480 <- function(plate_results, input) {\n\n    labkey_format <- plate_results |>\n        # Add new columns and values for experiment, pcr_lab, pcr_date, comments\n        mutate(\n            experiment = input$experiment,\n            pcr_lab = input$lab,\n            pcr_date = as.character(input$date),\n            cq_conf = input$cq_conf,\n            amp_score = input$amp_score,\n            comments = input$comments,\n            pcr_assay = input$assay\n        ) |>\n        # Change column names for Sample, Target, Cq, Cq.Conf, and Amp.Score\n        # to match labkey input columns\n        rename(\n            cartridge_id = Name,\n            pcr_ct = Cp,\n            pcr_copies = Concentration\n        ) |>\n        # Replace pcr_ct values with values accepted by labkey\n        mutate(\n            pcr_ct = if_else(is.na(pcr_copies), 99, pcr_ct)\n        ) |>\n        # add dilution factor\n        mutate(\n            dilution_factor = if_else(grepl(\"AE\", cartridge_id), input$dilution, NA)\n        ) |>\n        # reorder columns required for labkey\n        select(\n            experiment, cartridge_id, pcr_lab, pcr_date, pcr_assay, pcr_ct, pcr_copies,\n            dilution_factor, cq_conf, amp_score, comments\n        )\n\n    return(labkey_format)\n}\n\nprocessLC96 <- function(plate_results, input) {\n\n    labkey_format <- plate_results |>\n        # Add new columns and values for experiment, pcr_lab, pcr_date, comments\n        mutate(\n            experiment = input$experiment,\n            pcr_lab = input$lab,\n            pcr_date = as.character(input$date),\n            cq_conf = input$cq_conf,\n            amp_score = input$amp_score,\n            comments = input$comments,\n        ) |>\n        # Change column names for Sample, Target, Cq, Cq.Conf, and Amp.Score to\n        # match labkey input columns\n        rename(\n            cartridge_id = Sample.Name,\n            pcr_assay = Gene.Name,\n            pcr_ct = Cq,\n            pcr_copies = Concentration.Mean,\n        ) |>\n        # Replace pcr_ct, pcr_copies, and pcr_assays with values accepted by labkey\n        mutate(\n            pcr_ct = str_replace(pcr_ct, \"-\", \"99\") |> as.numeric(),\n            pcr_copies = str_remove(pcr_ct, \"-\"),\n            pcr_assay = if_else(\n                pcr_assay %in% c(\"N1\", \"N2\"),\n                paste(\"CDC\", pcr_assay, sep = \" \"),\n                pcr_assay\n            )\n        ) |>\n        select(\n            experiment, cartridge_id, pcr_lab, pcr_date, pcr_assay, pcr_ct,\n            pcr_copies, cq_conf, amp_score, comments\n        )\n\n    return(labkey_format)\n\n}\n\n\n# Define server logic to read selected file ----\nserver <- function(input, output) {\n\n    datasetInput <- reactive({\n\n        req(input$file1)\n        plate_results <- read.csv(\n            input$file1$datapath,\n            header = input$header,\n            sep = input$sep,\n            quote = input$quote,\n            skip = input$skip,\n        )\n\n        if (input$instrument == \"LC480\") {\n\n            labkey_format <- processLC480(plate_results, input)\n\n        } else if (input$instrument == \"LC96\") {\n\n            labkey_format <- processLC96(plate_results, input)\n\n            return(labkey_format)\n\n        } else {\n\n            return(plate_results)\n\n        }\n\n    })\n\n    output$table <- renderTable({\n        datasetInput()\n    })\n\n    output$downloadData <- downloadHandler(\n        filename = function() {\n\n            # Use the selected dataset as the suggested file name\n            paste(input$experiment, \"_labkey_\", input$pathogen, \"_results.csv\", sep = \"\")\n        },\n        content = function(file) {\n\n            # Write the dataset to the `file` that will be downloaded\n            write_csv(datasetInput(), file)\n        }\n    )\n}\n\n# Create Shiny app ----\nshinyApp(ui, server)\n\nshinylive::export(appdir = \"qpcr_labkey_prep\", destdir = \"docs\")\n","type":"text"}]
